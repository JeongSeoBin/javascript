# toString()
let num = 10;

num.toString()// "10"
=> 문자열로 변환

num.toString(2); //"1010"
=> 괄호안의 진법으로 변경 후 문자열로 변환

let num2 = 255;
num2.toString(16); //"ff"


# Math
- ceil(): 올림
let num1 = 5.1;
let num2 = 5.7;

Math.ceil(num1); //6
Math.ceil(num2); //6

- floor(): 내림
Math.floor(num1); //5
Math.floor(num2); //5

- round(): 반올림
Math.round(num1); //5
Math.round(num2); //6

- 소수점 자릿수
소수점 둘째자리까지 표현(셋째 자리에서 반올림)
let userRate = 30.1234;

//100을 곱한 후 반올림하고 다시 100으로 나눠준다
Math.round(userRate*100)/100 //30.12

//tofixed(소수점 자릿수)
문자열을 반환한다
userRate.toFixed(2) //"30.12"
userRate.toFixed(0) //"30"
userRate.toFixed(6) //"30.123400"
Number(userRate.toFixed(2)) //30.12

- random()
0 ~ 1 사이 무작위 숫자 생성

1 ~ 100 사이 임의의 숫자를 뽑고 싶다면
Math.floor(Math.random()*100)+1

- max()/min(): 최대/최소 값
Math.max(1, 4, -1, 5, 10, 9, 9, 5.54); //10
Math.min(1, 4, -1, 5, 10, 9, 9, 5.54); //-1

- abs(): 절대값
Math.abs(-1) //1

- pow(n, m): 제곱
Math.pow(2, 10); //1024

- sqrt(): 제곱근
Math.sqrt(16) //4

# isNaN()
NaN인지 확인하는 방법은 isNaN()을 이용하는 방법만이 유일하다

let x = Number('x') //NaN
x == NaN //false
x === NaN //false
NaN == NaN //false

isNaN(x) //true
isNaN(3) //false

# parseInt()
Number()와 달리 문자와 혼용되어 있어도 가능
읽을 수 있을 만큼 읽고 문자를 만나면 읽은 곳까지 반환한다
따라서 문자로 시작하면 바로 NaN를 반환한다
let margin = '10px'
parseInt(margin); //10
Number(margin)// NaN

let redColor = 'f3'
parseInt(redColor); //NaN

2번째 인수를 전달하여 진수를 지정할 수 있다
parseInt(redColor, 16) // 243
parseInt('11', 2) // 3

# parseFloat()
let padding = '18.5%';
parseInt(padding); //18
parseFloat //18.5